def DFS_cycle(start, graph, visited, parent):
    visited[start - 1] = True

    for i in graph[start - 1]:
        if not visited[i[1] - 1]:
            parent[i[1] - 1] = start
            if DFS_cycle(i[1], graph, visited, parent):
                return True
        elif parent[start - 1] != i[1]:
            return True

    return False

def create_graph(graph,source,destination,weight=1):
    graph[source-1].append((source,destination,weight))

v = 7
graph = [[] for _ in range(v)]

create_graph(graph,1,2)
create_graph(graph,1,3)
create_graph(graph,2,1)
create_graph(graph,2,4)
create_graph(graph,3,1)
create_graph(graph,3,5)
create_graph(graph,4,2)
create_graph(graph,4,3)
create_graph(graph,5,3)
create_graph(graph,5,6)
create_graph(graph,6,5)
create_graph(graph,6,7)
create_graph(graph,7,6)

visited = [False] * len(graph)
parent = [0] * len(graph)
dfs = DFS_cycle(1,graph,visited,parent)
if dfs == True:
    print("Cycle is there")
else:
    print("No cycle")
