def DFS(start , graph , visited):
    visited[start-1] = True
    for i in graph[start - 1]:
        if visited[i[1]-1] == False:
            DFS(i[1],graph,visited)
    print(start)
    
    
def create_graph(graph,source,destination,weight=1):
    graph[source-1].append((source,destination,weight))

v = 11
graph = [[] for _ in range(v)]
for i in range(v):
    graph[i] = [ ]

create_graph(graph,1,2)
create_graph(graph,1,3)
create_graph(graph,1,10)
create_graph(graph,2,1)
create_graph(graph,2,4)
create_graph(graph,3,1)
create_graph(graph,3,7)
create_graph(graph,4,2)
create_graph(graph,4,5)
create_graph(graph,4,7)
create_graph(graph,4,8)
create_graph(graph,5,4)
create_graph(graph,5,6)
create_graph(graph,6,5)
create_graph(graph,6,10)
create_graph(graph,6,9)
create_graph(graph,7,3)
create_graph(graph,7,4)
create_graph(graph,7,11)
create_graph(graph,8,4)
create_graph(graph,8,9)
create_graph(graph,9,6)
create_graph(graph,9,8)
create_graph(graph,10,1)
create_graph(graph,10,6)
create_graph(graph,11,7)

visited = [False] * len(graph)

DFS(1,graph,visited)
