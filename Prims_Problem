import heapq

def prims(graph):
    mst = []
    total_weight = 0
    start_vertex = 1
    visited.add(start_vertex)
    pq = [(weight, start_vertex, dest) for start, dest, weight in graph[start_vertex - 1]]
    heapq.heapify(pq)
    
    while pq:
        weight, src, dest = heapq.heappop(pq)
        if dest not in visited:
            mst.append((src, dest, weight))
            total_weight += weight
            visited.add(dest)
            for neighbor in graph[dest - 1]:
                if neighbor[1] not in visited:
                    heapq.heappush(pq, (neighbor[2], neighbor[0], neighbor[1]))

    return mst, total_weight
    
    
    
def create_graph(graph,source,destination,weight):
    graph[source-1].append((source,destination,weight))   
    
v = 11
graph = [[] for _ in range(v)]
for i in range(v):
    graph[i] = [ ]

create_graph(graph,1,2,6)
create_graph(graph,1,3,5)
create_graph(graph,1,5,4)
create_graph(graph,2,3,2)
create_graph(graph,3,4,3)
create_graph(graph,3,7,11)
create_graph(graph,4,5,1)
create_graph(graph,4,6,7)
create_graph(graph,4,8,10)
create_graph(graph,5,6,8)
create_graph(graph,7,3,11)
create_graph(graph,7,8,9)

mst, total_weight = graph.prims()
for edge in mst:
    print(edge)
print(total_weight)
